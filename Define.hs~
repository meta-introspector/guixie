import Data.IORef

type Name = String
type Value = String 

data Scope = Scope {
  parent :: Maybe Scope,
  bindings :: IORef [(Name, Value)]
}

newScope :: Maybe Scope -> IO Scope
newScope parent = Scope parent <$> newIORef []

define :: Name -> Value -> Scope -> IO ()
define name value scope = modifyIORef' (bindings scope) ((name, value):)

lookup2 :: Name -> Scope -> IO (Maybe Value)
lookup2 name scope = do
  bindings' <- readIORef (bindings scope)
  case lookup2 name bindings' of
    Just value -> return (Just value)
    Nothing -> case parent scope of
      Just parent' -> lookup2 name parent'
      Nothing -> return Nothing
